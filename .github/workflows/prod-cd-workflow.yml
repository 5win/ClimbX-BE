name: Prod CD Workflow

on:
  workflow_dispatch:

  push:
    branches: [ "main" ]

jobs:
  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BE_CORE_EC2_HOST }}
          username: ${{ secrets.BE_CORE_EC2_USERNAME }}
          key: ${{ secrets.BE_CORE_EC2_SSH_KEY_PEM }}
          port: 22
          script: |
            # 1. AWS ECR에 로그인
            # EC2에 연결된 IAM 역할 덕분에 Access Key 없이 로그인이 가능
            aws ecr get-login-password \
              --region ${{ vars.AWS_REGION }} \
            | docker login \
              --username AWS \
              --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
            
            # 2. 최신 Docker 이미지 PULL
            docker pull ${{ vars.DOCKER_IMAGE_NAME }}:latest
            
            # 3. 기존에 실행 중인 컨테이너가 있다면 중지 및 제거
            if [ $(docker ps -q --filter "name=${{ vars.DOCKER_IMAGE_NAME }}") ]; then
              echo "Stopping and removing existing container..."
              docker stop ${{ vars.DOCKER_IMAGE_NAME }}
              docker rm ${{ vars.DOCKER_IMAGE_NAME }}
              echo "Container stopped and removed."
            fi
            
            # 4. 새로운 컨테이너 실행
            echo "Starting new container..."
            docker run -d -p ${{ vars.CONTAINER_PORT }}:${{ vars.CONTAINER_PORT }} \
              --name ${{ vars.DOCKER_IMAGE_NAME }} \
              --restart always \
              ${{ vars.DOCKER_IMAGE_NAME }}:latest
            
            echo "New container started successfully."

            # 5. 사용되지 않는 오래된 Docker 이미지 정리 (디스크 공간 확보)
            docker image prune -af
            
            echo "🚀 Deployment to EC2 completed successfully!"
